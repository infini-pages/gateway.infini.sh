<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on INFINI Gateway</title><link>/docs/tutorial/</link><description>Recent content in Tutorials on INFINI Gateway</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache Log4j Vulnerability Processing</title><link>/docs/tutorial/log4j2_filtering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/log4j2_filtering/</guid><description>Apache Log4j Vulnerability Processing # CVE Address
https://github.com/advisories/GHSA-jfh8-c2jp-5v3q
Vulnerability Description
Apache Log4j is a very popular open source logging toolkit used for the Java runtime environment. Many Java frameworks including Elasticsearch of the latest version, use this component. Therefore, the scope of impact is huge.
The latest vulnerability existing in the execution of Apache Log4j&amp;rsquo;s remote code was revealed recently. Attackers can construct malicious requests and utilize this vulnerability to execute arbitrary code on a target server.</description></item><item><title>Online Query Repair</title><link>/docs/tutorial/online_query_rewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/online_query_rewrite/</guid><description>Online Query Repair # In some cases, you may find that the QueryDSL generated by the service code is unreasonable. The general practice is to modify the service code and publish it online. If the launch of a new version takes a long time (for example, the put-into-production window is not reached, major network operation closure is in progress, or additional code needs to be submitted to go live), a large number of tests need to be performed.</description></item><item><title>Query Request Log Analysis</title><link>/docs/tutorial/request-logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/request-logging/</guid><description>Query Request Log Analysis # INFINI Gateway can track and record all requests that pass through the gateway and analyze requests sent to Elasticsearch, to figure out request performance and service running status.
Setting a Gateway Router # To enable the query log analysis of INFINI Gateway, configure the tracing_flow parameter on the router and set a flow to log requests.
router: - name: default tracing_flow: request_logging default_flow: cache_first In the above configuration, one router named default is defined, the default request flow is cache_first, and the flow for logging is request_logging.</description></item><item><title>Index Document-Level Difference Contrast</title><link>/docs/tutorial/index_diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/index_diff/</guid><description>Index Difference Contrast # INFINI Gateway is able to compare differences between two different indexes in the same or different clusters. In scenarios in which application dual writes, CCR, or other data replication solutions are used, differences can be periodically compared to ensure data consistency.
Function Demonstration # How Is This Feature Configured? # Setting a Target Cluster # Modify the gateway.yml configuration file by setting two cluster resources source and target and adding the following configuration:</description></item><item><title>Adding a Proxy and Basic Security for Kibana</title><link>/docs/tutorial/proxy_kibana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/proxy_kibana/</guid><description>Adding a Proxy and Basic Security for Kibana # If you have multiple Kibana versions or your version is out of date, or if you do not set TLS or identity, then anyone can directly access Kibana. You can use INFINI Gateway to quickly fix this issue.
Using the HTTP Filter to Forward Requests # - http: schema: &amp;quot;http&amp;quot; #https or http host: &amp;quot;192.168.3.188:5602&amp;quot; Adding Authentication # - basic_auth: valid_users: medcl: passwd Replacing Static Resources in the Router # - method: - GET pattern: - &amp;quot;/plugins/kibanaReact/assets/illustration_integrations_lightmode.</description></item><item><title>Compatible with the Count Structure of Query Response Results of Different Elasticsearch Versions</title><link>/docs/tutorial/fix_count_in_search_response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/fix_count_in_search_response/</guid><description>Compatible with the Count Structure of Query Response Results of Different Elasticsearch Versions # To optimize performance in Elasticsearch 7.0 and later versions, search result matches are not accurately counted and the search result response body is adjusted. This will inevitably cause incompatibility with existing code. How can the problem be fixed quickly?
Structure Contrast # The search structure difference is as follows:
The search structure used by Elasticsearch before version 7.</description></item><item><title>Integration with Elasticsearch-Hadoop</title><link>/docs/tutorial/es-hadoop_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorial/es-hadoop_integration/</guid><description>Integration with Elasticsearch-Hadoop # Elasticsearch-Hadoop utilizes a seed node to access all back-end Elasticsearch nodes by default. The hotspots and requests may be improperly allocated. To improve the resource utilization of back-end Elasticsearch nodes, you can implement precision routing for the access to Elasticsearch nodes through INFINI Gateway.
Write Acceleration # If you import data by using Elasticsearch-Hadoop, you can modify the following parameters of Elasticsearch-Hadoop to access INFINI Gateway, so as to improve the write throughput:</description></item></channel></rss>